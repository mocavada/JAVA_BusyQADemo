buildscript {
    ext {
        springBootVersion = '2.1.3.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.moowork.gradle:gradle-node-plugin:1.2.0")
        classpath("com.palantir.gradle.docker:gradle-docker:0.20.1")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.moowork.node'
apply plugin: 'com.palantir.docker'

repositories {
    mavenCentral()
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    //web
    implementation('org.springframework.boot:spring-boot-starter-web')

    //JPA
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('mysql:mysql-connector-java')

    //thymeleaf
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')

    //mustache
    implementation('org.springframework.boot:spring-boot-starter-mustache')

    //log
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    implementation('org.springframework.boot:spring-boot-starter-actuator')

    //aop
    implementation('org.springframework.boot:spring-boot-starter-aop')

    //test
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation group: 'com.github.springtestdbunit', name: 'spring-test-dbunit', version: '1.3.0'
    testImplementation group: 'com.google.code.gson', name: 'gson', version: '2.8.4'
    testImplementation group: 'net.sourceforge.htmlunit', name: 'htmlunit', version: '2.30'

    // spring boot hot swapping
    // https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html
    // https://www.vojtechruzicka.com/spring-boot-devtools/
    developmentOnly("org.springframework.boot:spring-boot-devtools")
}

//======== tasks for database schema
task dbCreateSchema(type: JavaExec) {
    group = 'database'
    main = "com.busyqa.config.db.MainSchemaManagement"
    classpath = sourceSets.main.runtimeClasspath
    args 'create'
}

task dbDropSchema(type: JavaExec) {
    group = 'database'
    main = "com.busyqa.config.db.MainSchemaManagement"
    classpath = sourceSets.main.runtimeClasspath
    args 'drop'
}

task dbCreateAdmin(type: JavaExec) {
    group = 'database'
    main = "com.busyqa.config.db.MainSchemaManagement"
    classpath = sourceSets.main.runtimeClasspath
    args 'createAdmin'
}

//======== tasks for angular frontend
node {
    version = "10.15.1"
    npmVersion = "6.8.0"
    download = true
    nodeModulesDir = file("frontend")
}

task buildFrontEnd(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'application'
    description = "Build and watches the client side assets for rebuilding"
    args = ['run', 'buildDevFast']

    //skip update. remove it if needed
    nodeSetup.onlyIf {
        !nodeSetup.nodeDir.exists()
    }
    npmSetup.onlyIf {
        !npmSetup.npmDir.exists()
    }
    npmInstall.onlyIf {
        !npmSetup.npmDir.exists()
    }
}

//======== comment out this line, to run Spring boot without rebuild angular frontend
//bootRun.dependsOn(buildFrontEnd)

//======== speed boot for spring boot
bootRun {
    systemProperties['Xverify'] = 'none'
    systemProperties['TieredStopAtLevel'] = '1'
}

//================================================================
//========Docker - Start
//group = 'com.busyqa'
//version = '0.0.1-SNAPSHOT'
//sourceCompatibility = 1.8

// This is used as the docker image prefix (org)
group = 'jamesbusyqa'
bootJar {
    baseName = 'fsd'
    version = '0.1.0'
}

task initConfig(type: Copy) {
    from('dockersh/my.cnf')
    from('dockersh/run.sh')
    from('dockersh/start-mysqld.sh')
    from('dockersh/start-springboot.sh')
    from('dockersh/supervisord-mysqld.conf')
    from('dockersh/supervisord-springboot.conf')
    into 'build/docker'
}

docker {
    dependsOn initConfig, build
    name "${project.group}/${bootJar.baseName}"
    tags 'latest'
    files bootJar.archivePath
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}
//========Docker - End
//================================================================
